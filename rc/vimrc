
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"set runtimepath+=~/dotfiles
call plug#begin()

"Plug 'ervandew/supertab' " tab auto completion
Plug 'tpope/vim-sensible'
" Plug 'bash-support.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/nerdcommenter'
Plug 'stanangeloff/php.vim'
Plug 'tpope/vim-markdown'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-surround' " braces etc.
Plug 'schickling/vim-bufonly' " braces etc.
Plug 'tmhedberg/SimpylFold'
Plug 'scrooloose/syntastic' " python lint
Plug 'dkprice/vim-easygrep'
Plug 'tpope/vim-fugitive'
Plug 'vim-ruby/vim-ruby'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-bundler'
Plug 'honza/vim-snippets'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
Plug 'dense-analysis/ale'
Plug 'ludovicchabant/vim-gutentags'
Plug 'unkiwii/vim-nerdtree-sync'
Plug 'tpope/vim-abolish' "search and replace with case
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'arcticicestudio/nord-vim'
"Plug 'morhetz/gruvbox'
Plug 'ngmy/vim-rubocop'
Plug 'bkad/CamelCaseMotion'
Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'leafgarland/typescript-vim' " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax
Plug 'jparise/vim-graphql'        " GraphQL syntax
Plug 'airblade/vim-rooter'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'mbbill/undotree'
Plug 'tpope/vim-repeat'
Plug '907th/vim-auto-save'
Plug 'zigius/vim-auto-save-git-hook'
Plug 'mhinz/vim-startify'
Plug 'thoughtbot/vim-rspec'
if executable('node')
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
endif
" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'
Plug 'ctrlpvim/ctrlp.vim'

if has('nvim')
  Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/denite.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'slim-template/vim-slim'
call plug#end()

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


"source ~/.vim/custom/*.vim

" Leader key is SPACE, I find it the best
let mapleader = " "
set lazyredraw " Donâ€™t update screen during macro and script execution.
set updatetime=300 "time before swap file is written to disk"
" Faster saving and exiting
nnoremap <leader>w :w!<CR>
nnoremap <silent><leader>q :q!<CR>
nnoremap <silent><leader>x :x<CR>
" Open Vim configuration file for editing
nnoremap <silent><leader>2 :e ~/.vimrc<CR>
" Source Vim configuration file and install plugins
nnoremap <silent><leader>1 :source ~/.vimrc \| :PlugInstall<CR>


" Nerdtree configuratio/
let g:deoplete#enable_at_startup = 1
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeWinSize = 40
"let g:nerdtree_sync_cursorline = 1

set runtimepath+=~/dotfiles
runtime! etc/init/vim/**.vim
" Allow copy and paste from system clipboard
set clipboard=unnamed

set ignorecase " Ignore case when searching
set smartcase  " When searching try to be smart about cases
set nohlsearch " Don't highlight search term
set incsearch  " Jumping search

set encoding=utf-8

" let netrw be a tree
let g:netrw_liststyle=3

" remove warning for snipMate
"let g:snipMate = { 'snippet_version' : 1 }

" configure linters here
let g:ale_linters = {
      \   'ruby': ['standardrb', 'rubocop'],
      \   'python': ['flake8', 'pylint'],
      \   'javascript': ['eslint'],
      \}
let g:ale_fix_on_save = 1
" display linter warnings in status bar
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'âœ¨ all good âœ¨' : printf(
        \   'ðŸ˜ž %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction

set statusline=
set statusline+=%m
set statusline+=\ %f
set statusline+=%=
set statusline+=\ %{LinterStatus()}
set laststatus=2


syntax enable
set background=dark
let g:solarized_termcolors=256
"set t_Co=256
let g:solarized_termtrans =   1 " This gets rid of the grey background
let g:solarized_degrade   =   0
let g:solarized_bold      =   1
let g:solarized_underline =   1
let g:solarized_italic    =   1
let g:solarized_contrast  =   "high" | "normal"|   "high" or "low"
let g:solarized_visibility=   "high" | "normal"|   "high" or "low"
silent! colorscheme solarized
if has("gui_running")
  syntax on
  set hlsearch

  colorscheme nord
  set bs=2 " backspace
  set ai " auto indent
  set ruler " lines colonne
  set guifont=Hack\ Nerd\ Font:h14
endif

autocmd! GUIEnter * set vb t_vb=
"autocmd vimenter * ++nested colorscheme gruvbox
" activate mouse
set mouse=a


filetype plugin on

" ::::::::: Initialization ::::::::::::::::
syntax enable



" display line numbers
set number

" inserts new lines
"map <Enter> o<ESC>
"map <S-Enter> O<ESC>

nnoremap <C-h> :Ag<Cr>
nnoremap <C-p> :GFiles --cached --others --exclude-standard<cr>

" todo: probably better
"let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" SuperTab recommended settings (no explanation...)
let g:SuperTabDefaultCompletionType = ""

set tabstop=4 softtabstop=0 noexpandtab shiftwidth=4 

set hlsearch "highlight search


" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm.app"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

" guten-tags & ctags management
 let g:gutentags_ctags_tagfile= ".tags"
"

" rm search highligth
" nnoremap <esc> :noh<return><esc>

" hard mode
"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

"set foldmethod=indent
noremap 4 :BufOnly<CR>

" status line
"let &titlestring = $USER . "@" . hostname() . " " . expand("%:p")
if &term == "screen"
  set t_ts=^[k
  set t_fs=^[\
endif
if &term == "screen" || &term == "xterm"
  set title
endif


" >>> quit vim if last buffer


"split navigations
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>


" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
" nnoremap <space> za


" PEP8 standarts (python)
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

" other standarts
au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |


" Flagging Unnecessary Whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/




" nice python
let python_highlight_all=1
syntax on


let g:EasyGrepRecursive=1
let g:EasyGrepIgnoreCase=1 
let g:EasyGrepHidden=1


let g:ctrlp_root_markers = ['.git', 'package.json', 'Gemfile']

if executable('ag')
  "let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
  "let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
endif

" https://github.com/kien/ctrlp.vim/issues/646
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

let g:ctrlp_show_hidden = 1
" Navigating tabs
nmap <leader>[ :tabprevious<CR>
nmap <leader>] :tabnext<CR>

" Alt-right/left to navigate forward/backward in the tags stack
"map <C-H> <C-T>
"map <C-L> <C-]>


if has("gui_running")
	" MacVim Touch Bar support
	" ========================
	" Since version 8.0 (I think), MacVim natively supports the macOS touch bar. By default it just contains 
	" one button to toggle fullscreen mode. To add some more useful buttons, just copy this into your .vimrc
	"
	" More details about the syntax can be found here: https://github.com/macvim-dev/macvim/blob/master/runtime/doc/gui_mac.txt
	" For a list of touch bar image names, see https://developer.apple.com/design/human-interface-guidelines/macos/touch-bar/touch-bar-icons-and-images/


	" Toggle NerdTree
	an icon=NSTouchBarSidebarTemplate TouchBar.NerdTree :NERDTreeToggle<CR> 

	an TouchBar.-flexspace2- <Nop>

	" List buffers
	an icon=NSTouchBarListViewTemplate TouchBar.ListBuffers :ls<CR>
	" Delete buffer
	an icon=NSTouchBarDeleteTemplate TouchBar.Delete :bd<CR>

	an TouchBar.-Sep- <Nop> 

	" Previous buffer
	an icon=NSTouchBarGoBackTemplate TouchBar.GoBack :bp<CR>
	" Next buffer
	an icon=NSTouchBarGoForwardTemplate TouchBar.GoForward :bn<CR>
	anoremenu 1.1 TouchBar.-flexspace- <Nop>
	tlnoremenu 1.1 TouchBar.-flexspace- <Nop>

endif




" Rubocop integration
let g:vimrubocop_keymap = 0
nmap <Leader>R :RuboCop -a<CR>


"duplicate a line without adding it to the register
map <Leader>j :co.<CR>




" Camelcase configuration
let g:camelcasemotion_key = '<leader>'
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" Coc configuration
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup


" Automatically save the session when leaving Vim
"autocmd! VimLeave * mksession
" Automatically load the session when entering vim
"autocmd! VimEnter * source ./Session.vim
"
set noswapfile

" start scrolling when near buffer hedges
"set scrolloff=10

" avoid line break
set wrapmargin=0
set textwidth=0

" this is a trick for mac, needs to have a condition
" move line up / down with alt-j
nnoremap âˆ† :m .+1<CR>==
nnoremap Ëš :m .-2<CR>==
inoremap âˆ† <Esc>:m .+1<CR>==gi
inoremap Ëš <Esc>:m .-2<CR>==gi
vnoremap âˆ† :m '>+1<CR>gv=gv
vnoremap Ëš :m '<-2<CR>gv=gv

command! Q :q


" This is the default option:
"   - Preview window on the right with 50% width
"   - CTRL-/ will toggle preview window.
" - Note that this array is passed as arguments to fzf#vim#with_preview function.
" - To learn more about preview window options, see `--preview-window` section of `man fzf`.
let g:fzf_preview_window = ['right,50%', 'ctrl-/']


" from: https://developpaper.com/integrated-usage-of-vim-and-fuzzy-search-artifact-fzf-from-simple-to-advanced/
" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)g>0)


" Prettier 
command! -nargs=0 Prettier :CocCommand prettier.formatFile
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
nmap " ysiw"
nmap ' ysiw'

" i dont want to open files in nerdtree buffer 
"au BufEnter * if bufname('#') =~ 'NERD_tree' && bufname('%') !~ 'NERD_tree' && winnr('$') > 1 | b# | exe "normal! \<c-w>\<c-w>" | :blast | endif


" shift + move to select stuff
nmap <S-Up> v<Up>
nmap <S-Down> v<Down>
nmap <S-Left> v<Left>
nmap <S-Right> v<Right>
vmap <S-Up> <Up>
vmap <S-Down> <Down>
vmap <S-Left> <Left>
vmap <S-Right> <Right>

set nowrap

let g:auto_save = 1
let g:auto_save_silent = 1  " do not display the auto-save notification

let g:rooter_patterns = ['.git', '.envrc', 'package.json']
